Sprint 4 Development Tasks:

Easy to Medium:
- Need to update "Employee" and "EmployeeDB" classes.
     - Need to implement "PayMethod" and "Classification" class families? Are they necessary to meet
       the stakeholder's requirements? If so, then this is a task.
          - The PayMethod and Classification classes help process payments, which is important. If we
            don't use them, we still need to make something to process the payments, and report on how
            much employees are paid. Original class printed ("Mailing $256.78 to so and so" in a report
            as a method. That would be handy for us at this point, too). It would be nice if employee
            class types intuitively knew how their payments worked.
     - Need to create a way to archive employees. Maybe have "EmployeeDB" have an "emp_list" and an
       "archived" emp_list?
          - When an employee is archived, it needs to be written/updated to the "employees.csv" file as
            well, so when the program is next started up, it will remember that they were archived.
          - Do we want a data member that says whether they are archived, or just read start and end
            dates? Or even just put them in a separate list, and have a simple marker in the file that
            they are archived?


Medium to Difficult:
- Implement the ability to "Edit" employees, both in the GUI and in the database.
     - Implement the EmployeeDB class so that it rewrites the "employees.csv" file to update the DB.
          - (Or has methods to update the "employees.csv" file.)
     - Admins and normal emps need to have different permissions when "Edit" is clicked.
     - Need a way to save all changes made after editing. Check if any changes were made?
     - Update the database file after changing an employee's data.
     - When editing user data in the GUI, validate that types of data for each field are correct. Throw
       an error if they are not!


Easy to Medium:
- Implement the ability to add new employees to the database.
     - Make sure it will integrate well with the GUI!
     - Validate that types of data entered in are correct.
     - This task would go well with making "Edit" emp functionality.


Easy to Medium:
- Make login functional
     - Actually validate username/id and password of users.
     - Encryption of passwords, etc.?


Unknown:
- Add in help functionality
     - What should this even look like?


Easy to Difficult:
- Make the employee permission level functions fully functional, and separate the user types.

Medium to Difficult:
- GUI design/fine-tuning?
     - Should we put the login functionality in a separate function? Or leave it global?
     - Design of the employee data screen - I think it may be good to make it a bit more orderly.
     - General styling and design to make it look nice?
     - Add all necessary buttons - On admin screen, add a "Report" button, an "Add Employee" button.
       Also, add a "Help" menu, and possibly a button to "Log out" of the Admin screen.
       Also, need to include the ability to archive an employee. Do on "Admin" or "Employee" screen?
     - Need to be able to let user decide whether to include archived employees in "All Emp Data"
       report. Have a radio button on Admin screen, or a selection window when you click on the "Report"
       button?
     - New screens too? "Add New Employee" screen, ability to Edit employee data fields in GUI, Report
       screens that show the report information (report person can populate/fine-tune the report
       screens), "Help" screen, etc.
     - Ability to sort the Employees in the Employee list.
     - Ability to search for Employees with a search bar of some sort.


Medium to Difficult: (may end up being our hardest dev task?)
- Report functionality.
     - "All Emp Data" report.
          - A report of each employee's data, and how much they are paid this pay-period?
               - (Process payments upon clicking that button - process then delete timecards?)
          - Also include in the report the hours that hourly emps worked (sum up from "timecards.csv")
          - Also include the commissions that commissioned emps made (sum up from "receipts.csv")
          - Allow Admin to determine whether to include archived employees each time report is run.
          - Need to be able to report on payments. Make sure payment functions work.
          - Have clicking this report process "timecards.csv" and "receipts.csv" and use employees'
            data to create "reports.csv", and display a report on the GUI.
          - This is as if we are processing a payment? So that we will have something that our paystubs
            can look at, to know how much emps have been paid.
          - Include the date the payment was "processed" (when the report was run) in "reports.csv"?
     - Pay Stub report.
          - Have this file be able to read from "reports.csv" generated by "All Emp Data" report, to
            display how much that employee was paid in the last pay period.
          - Hourly employees are paid hours (found in "reports.csv") * their hourly pay.
          - Salary employees are paid 1/24th of their salary.
          - Commissioned employees are paid 1/24th of their salary, + commissions * commission rate.
          - Included the date of the last paycheck from "reports.csv"?


Probs include with reports.
- Need to be able to process timecards and receipts for hourly and commissioned employees, and generate
their pay reports.
     - Have these processed when you run the "All Emp Data" report?


Easy-peasy:
- Update the Class UML Structure Diagram after/during this Sprint's development, so that it matches
the end product.



How to split up Sprint 4 tasks:
     We have 7 tasks.
	1 super easy task
	3 Easy to Medium tasks
	3 Medium to Difficult tasks
	1 Unknown (help functionality)

     Can clarify what the involved functions are that different people are allowed to edit.

     Need to come up with a way to manage code versions, and make sure our code remains compatible with
     each other (and that we don't make simultaneous updates that wipe each others' code out)!


   - Tristan:
     - Employee Class update
     - Edit employee functionality
   - Abbie:
     - GUI
   - Matt:
     - Report
   - Anyone else?
